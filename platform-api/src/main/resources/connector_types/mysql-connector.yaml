---
image                  : ghcr.io/datacater/kafka-connect-mysql:2023.1
name                   : datacater-kafka-connect-mysql
version                : '2023.1'
predefinedConfiguration:
  connector.class: io.debezium.connector.mysql.MySqlConnector
configuration          :
-   name: topic.prefix
    displayName: Topic prefix
    description: Topic prefix that identifies and provides a namespace for the particular database server/cluster is capturing changes. The topic prefix
      should be unique across all other connectors, since it is used as a prefix for all Kafka topic names that receive events emitted by this connector.
      Only alphanumeric characters, hyphens, dots and underscores must be accepted.
    type: STRING
-   name: database.hostname
    displayName: Hostname
    description: Resolvable hostname or IP address of the database server.
    type: STRING
-   name: database.port
    displayName: Port
    description: Port of the database server.
    defaultValue: '3306'
    type: INT
-   name: database.user
    displayName: User
    description: Name of the database user to be used when connecting to the database.
    type: STRING
-   name: database.password
    displayName: Password
    description: Password of the database user to be used when connecting to the database.
    type: PASSWORD
-   name: database.initial.statements
    displayName: Initial statements
    description: A semicolon separated list of SQL statements to be executed when a JDBC connection (not binlog reading connection) to the database is established.
      Note that the connector may establish JDBC connections at its own discretion, so this should typically be used for configuration of session parameters
      only, but not for executing DML statements. Use doubled semicolon (';;') to use a semicolon as a character and not as a delimiter.
    type: STRING
-   name: database.server.id
    displayName: Cluster ID
    description: A numeric ID of this database client, which must be unique across all currently-running database processes in the cluster. This connector
      joins the MySQL database cluster as another server (with this unique ID) so it can read the binlog.
    type: LONG
-   name: database.server.id.offset
    displayName: Cluster ID offset
    description: Only relevant if parallel snapshotting is configured. During parallel snapshotting, multiple (4) connections open to the database client,
      and they each need their own unique connection ID. This offset is used to generate those IDs from the base configured cluster ID.
    defaultValue: '10000'
    type: LONG
-   name: database.ssl.mode
    displayName: SSL mode
    description: "Whether to use an encrypted connection to MySQL. Options include: 'disabled' (the default) to use an unencrypted connection; 'preferred'
      to establish a secure (encrypted) connection if the server supports secure connections, but fall back to an unencrypted connection otherwise; 'required'
      to use a secure (encrypted) connection, and fail if one cannot be established; 'verify_ca' like 'required' but additionally verify the server TLS
      certificate against the configured Certificate Authority (CA) certificates, or fail if no valid matching CA certificates are found; or'verify_identity'
      like 'verify_ca' but additionally verify that the server certificate matches the host to which the connection is attempted."
    defaultValue: disabled
    type: STRING
-   name: database.ssl.keystore
    displayName: SSL Keystore
    description: The location of the key store file. This is optional and can be used for two-way authentication between the client and the MySQL Server.
    type: STRING
-   name: database.ssl.keystore.password
    displayName: SSL Keystore Password
    description: The password for the key store file. This is optional and only needed if 'database.ssl.keystore' is configured.
    type: PASSWORD
-   name: database.ssl.truststore
    displayName: SSL Truststore
    description: The location of the trust store file for the server certificate verification.
    type: STRING
-   name: database.ssl.truststore.password
    displayName: SSL Truststore Password
    description: The password for the trust store file. Used to check the integrity of the truststore, and unlock the truststore.
    type: PASSWORD
-   name: database.jdbc.driver
    displayName: Jdbc Driver Class Name
    description: JDBC Driver class name used to connect to the MySQL database server.
    defaultValue: com.mysql.cj.jdbc.Driver
    type: CLASS
-   name: event.processing.failure.handling.mode
    displayName: Event deserialization failure handling
    description: "Specify how failures during processing of events (i.e. when encountering a corrupted event) should be handled, including: 'fail' (the
      default) an exception indicating the problematic event and its position is raised, causing the connector to be stopped; 'warn' the problematic event
      and its position will be logged and the event will be skipped; 'ignore' the problematic event will be skipped."
    defaultValue: fail
    type: STRING
-   name: max.batch.size
    displayName: Change event batch size
    description: Maximum size of each batch of source records. Defaults to 2048.
    defaultValue: '2048'
    type: INT
-   name: max.queue.size
    displayName: Change event buffer size
    description: Maximum size of the queue for change events read from the database log but not yet recorded or forwarded. Defaults to 8192, and should
      always be larger than the maximum batch size.
    defaultValue: '8192'
    type: INT
-   name: poll.interval.ms
    displayName: Poll interval (ms)
    description: Time to wait for new change events to appear after receiving no events, given in milliseconds. Defaults to 500 ms.
    defaultValue: '500'
    type: LONG
-   name: max.queue.size.in.bytes
    displayName: Change event buffer size in bytes
    description: Maximum size of the queue in bytes for change events read from the database log but not yet recorded or forwarded. Defaults to 0. Mean
      the feature is not enabled
    defaultValue: '0'
    type: LONG
-   name: provide.transaction.metadata
    displayName: Store transaction metadata information in a dedicated topic.
    description: Enables transaction metadata extraction together with event counting
    defaultValue: 'false'
    type: BOOLEAN
-   name: skipped.operations
    displayName: Skipped Operations
    description: "The comma-separated list of operations to skip during streaming, defined as: 'c' for inserts/create; 'u' for updates; 'd' for deletes,
      't' for truncates, and 'none' to indicate nothing skipped. By default, only truncate operations will be skipped."
    defaultValue: t
    type: LIST
-   name: snapshot.delay.ms
    displayName: Snapshot Delay (milliseconds)
    description: A delay period before a snapshot will begin, given in milliseconds. Defaults to 0 ms.
    defaultValue: '0'
    type: LONG
-   name: snapshot.include.collection.list
    displayName: Snapshot mode include data collection
    description: This setting must be set to specify a list of tables/collections whose snapshot must be taken on creating or restarting the connector.
    type: LIST
-   name: snapshot.fetch.size
    displayName: Snapshot fetch size
    description: The maximum number of records that should be loaded into memory while performing a snapshot.
    type: INT
-   name: snapshot.max.threads
    displayName: Snapshot maximum threads
    description: The maximum number of threads used to perform the snapshot. Defaults to 1.
    defaultValue: '1'
    type: INT
-   name: retriable.restart.connector.wait.ms
    displayName: Retriable restart wait (ms)
    description: Time to wait before restarting connector after retriable exception occurs. Defaults to 10000ms.
    defaultValue: '10000'
    type: LONG
-   name: query.fetch.size
    displayName: Query fetch size
    description: The maximum number of records that should be loaded into memory while streaming. A value of '0' uses the default JDBC fetch size.
    defaultValue: '0'
    type: INT
-   name: decimal.handling.mode
    displayName: Decimal Handling
    description: "Specify how DECIMAL and NUMERIC columns should be represented in change events, including: 'precise' (the default) uses java.math.BigDecimal
      to represent values, which are encoded in the change events using a binary representation and Kafka Connect's 'org.apache.kafka.connect.data.Decimal'
      type; 'string' uses string to represent values; 'double' represents values using Java's 'double', which may not offer the precision but will be far
      easier to use in consumers."
    defaultValue: precise
    type: STRING
-   name: snapshot.lock.timeout.ms
    displayName: Snapshot lock timeout (ms)
    description: The maximum number of millis to wait for table locks at the beginning of a snapshot. If locks cannot be acquired in this time frame, the
      snapshot will be aborted. Defaults to 10 seconds
    defaultValue: '10000'
    type: LONG
-   name: connect.timeout.ms
    displayName: Connection Timeout (ms)
    description: Maximum time to wait after trying to connect to the database before timing out, given in milliseconds. Defaults to 30 seconds (30,000 ms).
    defaultValue: '30000'
    type: INT
-   name: connect.keep.alive
    displayName: Keep connection alive (true/false)
    description: Whether a separate thread should be used to ensure the connection is kept alive.
    defaultValue: 'true'
    type: BOOLEAN
-   name: connect.keep.alive.interval.ms
    displayName: Keep alive interval (ms)
    description: Interval for connection checking if keep alive thread is used, given in milliseconds Defaults to 1 minute (60,000 ms).
    defaultValue: '60000'
    type: LONG
-   name: snapshot.mode
    displayName: Snapshot mode
    description: "The criteria for running a snapshot upon startup of the connector. Options include: 'when_needed' to specify that the connector run a
      snapshot upon startup whenever it deems it necessary; 'schema_only' to only take a snapshot of the schema (table structures) but no actual data; 'initial'
      (the default) to specify the connector can run a snapshot only when no offsets are available for the logical server name; 'initial_only' same as 'initial'
      except the connector should stop after completing the snapshot and before it would normally read the binlog; and'never' to specify the connector should
      never run a snapshot and that upon first startup the connector should read from the beginning of the binlog. The 'never' mode should be used with
      care, and only when the binlog is known to contain all history."
    defaultValue: initial
    type: STRING
-   name: snapshot.locking.mode
    displayName: Snapshot locking mode
    description: Controls how long the connector holds onto the global read lock while it is performing a snapshot. The default is 'minimal', which means
      the connector holds the global read lock (and thus prevents any updates) for just the initial portion of the snapshot while the database schemas and
      other metadata are being read. The remaining work in a snapshot involves selecting all rows from each table, and this can be done using the snapshot
      process' REPEATABLE READ transaction even when the lock is no longer held and other operations are updating the database. However, in some cases it
      may be desirable to block all writes for the entire duration of the snapshot; in such cases set this property to 'extended'. Using a value of 'none'
      will prevent the connector from acquiring any table locks during the snapshot process. This mode can only be used in combination with snapshot.mode
      values of 'schema_only' or 'schema_only_recovery' and is only safe to use if no schema changes are happening while the snapshot is taken.
    defaultValue: minimal
    type: STRING
-   name: snapshot.new.tables
    displayName: Snapshot newly added tables
    description: "BETA FEATURE: On connector restart, the connector will check if there have been any new tables added to the configuration, and snapshot
      them. There is presently only two options: 'off': Default behavior. Do not snapshot new tables. 'parallel': The snapshot of the new tables will occur
      in parallel to the continued binlog reading of the old tables. When the snapshot completes, an independent binlog reader will begin reading the events
      for the new tables until it catches up to present time. At this point, both old and new binlog readers will be momentarily halted and new binlog reader
      will start that will read the binlog for all configured tables. The parallel binlog reader will have a configured server id of 10000 + the primary
      binlog reader's server id."
    defaultValue: off
    type: STRING
-   name: bigint.unsigned.handling.mode
    displayName: BIGINT UNSIGNED Handling
    description: "Specify how BIGINT UNSIGNED columns should be represented in change events, including: 'precise' uses java.math.BigDecimal to represent
      values, which are encoded in the change events using a binary representation and Kafka Connect's 'org.apache.kafka.connect.data.Decimal' type; 'long'
      (the default) represents values using Java's 'long', which may not offer the precision but will be far easier to use in consumers."
    defaultValue: long
    type: STRING
-   name: time.precision.mode
    displayName: Time Precision
    description: "Time, date and timestamps can be represented with different kinds of precisions, including: 'adaptive_time_microseconds': the precision
      of date and timestamp values is based the database column's precision; but time fields always use microseconds precision; 'connect': always represents
      time, date and timestamp values using Kafka Connect's built-in representations for Time, Date, and Timestamp, which uses millisecond precision regardless
      of the database columns' precision."
    defaultValue: adaptive_time_microseconds
    type: STRING
-   name: enable.time.adjuster
    displayName: Enable Time Adjuster
    description: MySQL allows user to insert year value as either 2-digit or 4-digit. In case of two digit the value is automatically mapped into 1970 -
      2069.false - delegates the implicit conversion to the databasetrue - (the default) Debezium makes the conversion
    defaultValue: 'true'
    type: BOOLEAN
-   name: binary.handling.mode
    displayName: Binary Handling
    description: "Specify how binary (blob, binary, etc.) columns should be represented in change events, including: 'bytes' represents binary data as byte
      array (default); 'base64' represents binary data as base64-encoded string; 'base64-url-safe' represents binary data as base64-url-safe-encoded string;
      'hex' represents binary data as hex-encoded (base16) string"
    defaultValue: bytes
    type: STRING
-   name: schema.name.adjustment.mode
    displayName: Schema Name Adjustment
    description: "Specify how schema names should be adjusted for compatibility with the message converter used by the connector, including: 'avro' replaces
      the characters that cannot be used in the Avro type name with underscore; 'none' does not apply any adjustment (default)"
    defaultValue: none
    type: STRING
-   name: min.row.count.to.stream.results
    displayName: Stream result set of size
    description: The number of rows a table must contain to stream results rather than pull all into memory during snapshots. Defaults to 1,000. Use 0 to
      stream all results and completely avoid checking the size of each table.
    defaultValue: '1000'
    type: INT
-   name: incremental.snapshot.chunk.size
    displayName: Incremental snapshot chunk size
    description: The maximum size of chunk for incremental snapshotting
    defaultValue: '1024'
    type: INT
-   name: incremental.snapshot.allow.schema.changes
    displayName: Allow schema changes during incremental snapshot if supported.
    description: Detect schema change during an incremental snapshot and re-select a current chunk to avoid locking DDLs. Note that changes to a primary
      key are not supported and can cause incorrect results if performed during an incremental snapshot. Another limitation is that if a schema change affects
      only columns' default values, then the change won't be detected until the DDL is processed from the binlog stream. This doesn't affect the snapshot
      events' values, but the schema of snapshot events may have outdated defaults.
    defaultValue: 'false'
    type: BOOLEAN
-   name: schema.history.internal
    displayName: Database schema history class
    description: The name of the SchemaHistory class that should be used to store and recover database schema changes. The configuration properties for
      the history are prefixed with the 'schema.history.internal.' string.
    defaultValue: io.debezium.storage.kafka.history.KafkaSchemaHistory
    type: CLASS
-   name: schema.history.internal.skip.unparseable.ddl
    displayName: Skip DDL statements that cannot be parsed
    description: Controls the action Debezium will take when it meets a DDL statement in binlog, that it cannot parse.By default the connector will stop
      operating but by changing the setting it can ignore the statements which it cannot parse. If skipping is enabled then Debezium can miss metadata changes.
    defaultValue: 'false'
    type: BOOLEAN
-   name: schema.history.internal.store.only.captured.tables.ddl
    displayName: Store only DDL that modifies tables that are captured based on include/exclude lists
    description: Controls what DDL will Debezium store in database schema history. By default (false) Debezium will store all incoming DDL statements. If
      set to true, then only DDL that manipulates a captured table will be stored.
    defaultValue: 'false'
    type: BOOLEAN
-   name: converters
    displayName: List of prefixes defining custom values converters.
    description: Optional list of custom converters that would be used instead of default ones. The converters are defined using '<converter.prefix>.type'
      config option and configured using options '<converter.prefix>.<option>'
    type: STRING
-   name: sanitize.field.names
    displayName: Sanitize field names to adhere to Avro naming conventions
    description: Whether field names will be sanitized to Avro naming conventions
    defaultValue: 'false'
    type: BOOLEAN
-   name: tombstones.on.delete
    displayName: Change the behaviour of Debezium with regards to delete operations
    description: Whether delete operations should be represented by a delete event and a subsequent tombstone event (true) or only by a delete event (false).
      Emitting the tombstone event (the default behavior) allows Kafka to completely delete all events pertaining to the given key once the source record
      got deleted.
    defaultValue: 'true'
    type: BOOLEAN
-   name: heartbeat.interval.ms
    displayName: Connector heartbeat interval (milli-seconds)
    description: Length of an interval in milli-seconds in in which the connector periodically sends heartbeat messages to a heartbeat topic. Use 0 to disable
      heartbeat messages. Disabled by default.
    defaultValue: '0'
    type: INT
-   name: heartbeat.topics.prefix
    displayName: A prefix used for naming of heartbeat topics
    description: The prefix that is used to name heartbeat topics.Defaults to __debezium-heartbeat.
    defaultValue: __debezium-heartbeat
    type: STRING
-   name: signal.data.collection
    displayName: Signaling data collection
    description: The name of the data collection that is used to send signals/commands to Debezium. Signaling is disabled when not set.
    type: STRING
-   name: topic.naming.strategy
    displayName: Topic naming strategy class
    description: The name of the TopicNamingStrategy class that should be used to determine the topic name for data change, schema change, transaction,
      heartbeat event etc.
    defaultValue: io.debezium.schema.SchemaTopicNamingStrategy
    type: CLASS
-   name: column.include.list
    displayName: Include Columns
    description: Regular expressions matching columns to include in change events
    type: LIST
-   name: column.exclude.list
    displayName: Exclude Columns
    description: Regular expressions matching columns to exclude from change events
    type: LIST
-   name: table.include.list
    displayName: Include Tables
    description: The tables for which changes are to be captured
    type: LIST
-   name: table.exclude.list
    displayName: Exclude Tables
    description: A comma-separated list of regular expressions that match the fully-qualified names of tables to be excluded from monitoring
    type: LIST
-   name: message.key.columns
    displayName: Columns PK mapping
    description: "A semicolon-separated list of expressions that match fully-qualified tables and column(s) to be used as message key. Each expression must
      match the pattern '<fully-qualified table name>:<key columns>', where the table names could be defined as (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME),
      depending on the specific connector, and the key columns are a comma-separated list of columns representing the custom key. For any table without
      an explicit key configuration the table's primary key column(s) will be used as message key. Example: dbserver1.inventory.orderlines:orderId,orderLineId;dbserver1.inventory.orders:id"
    type: STRING
-   name: snapshot.select.statement.overrides
    displayName: List of tables where the default select statement used during snapshotting should be overridden.
    description: " This property contains a comma-separated list of fully-qualified tables (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on
      the specific connectors. Select statements for the individual tables are specified in further configuration properties, one for each table, identified
      by the id 'snapshot.select.statement.overrides.[DB_NAME].[TABLE_NAME]' or 'snapshot.select.statement.overrides.[SCHEMA_NAME].[TABLE_NAME]', respectively.
      The value of those properties is the select statement to use when retrieving data from the specific table during snapshotting. A possible use case
      for large append-only tables is setting a specific point where to start (resume) snapshotting, in case a previous snapshotting was interrupted."
    type: STRING
-   name: column.mask.hash.([^.]+).with.salt.(.+)
    displayName: Mask Columns Using Hash and Salt
    description: A comma-separated list of regular expressions matching fully-qualified names of columns that should be masked by hashing the input. Using
      the specified hash algorithms and salt.
    type: STRING
-   name: column.mask.with.(d+).chars
    displayName: Mask Columns With n Asterisks
    description: A comma-separated list of regular expressions matching fully-qualified names of columns that should be masked with configured amount of
      asterisk ('*') characters.
    type: STRING
-   name: column.truncate.to.(d+).chars
    displayName: Truncate Columns To n Characters
    description: A comma-separated list of regular expressions matching fully-qualified names of columns that should be truncated to the configured amount
      of characters.
    type: INT
-   name: include.schema.changes
    displayName: Include database schema changes
    description: Whether the connector should publish changes in the database schema to a Kafka topic with the same name as the database server ID. Each
      schema change will be recorded using a key that contains the database name and whose value include logical description of the new schema and optionally
      the DDL statement(s). The default is 'true'. This is independent of how the connector internally records database schema history.
    defaultValue: 'true'
    type: BOOLEAN
-   name: include.schema.comments
    displayName: Include Table and Column Comments
    description: "Whether the connector parse table and column's comment to metadata object. Note: Enable this option will bring the implications on memory
      usage. The number and size of ColumnImpl objects is what largely impacts how much memory is consumed by the Debezium connectors, and adding a String
      to each of them can potentially be quite heavy. The default is 'false'."
    defaultValue: 'false'
    type: BOOLEAN
-   name: column.propagate.source.type
    displayName: Propagate Source Types by Columns
    description: A comma-separated list of regular expressions matching fully-qualified names of columns that adds the column’s original type and original
      length as parameters to the corresponding field schemas in the emitted change records.
    type: LIST
-   name: datatype.propagate.source.type
    displayName: Propagate Source Types by Data Type
    description: A comma-separated list of regular expressions matching the database-specific data type names that adds the data type's original type and
      original length as parameters to the corresponding field schemas in the emitted change records.
    type: LIST
-   name: internal.snapshot.scan.all.columns.force
    displayName: Snapshot force scan all columns of all tables
    description: Restore pre 1.5 behaviour and scan all tables to discover columns. If you are excluding one table then turning this on may improve performance.
      If you are excluding a lot of tables the default behavior should work well.
    defaultValue: 'false'
    type: BOOLEAN
-   name: heartbeat.action.query
    displayName: An optional query to execute with every heartbeat
    description: The query executed with every heartbeat.
    type: STRING
-   name: include.query
    displayName: Include original SQL query with in change events
    description: "Whether the connector should include the original SQL query that generated the change event. Note: This option requires MySQL be configured
      with the binlog_rows_query_log_events option set to ON. Query will not be present for events generated from snapshot. WARNING: Enabling this option
      may expose tables or fields explicitly excluded or masked by including the original SQL statement in the change event. For this reason the default
      value is 'false'."
    defaultValue: 'false'
    type: BOOLEAN
-   name: table.ignore.builtin
    displayName: Ignore system databases
    description: Flag specifying whether built-in tables should be ignored.
    defaultValue: 'true'
    type: BOOLEAN
-   name: database.include.list
    displayName: Include Databases
    description: The databases for which changes are to be captured
    type: LIST
-   name: database.exclude.list
    displayName: Exclude Databases
    description: A comma-separated list of regular expressions that match database names to be excluded from monitoring
    type: LIST
-   name: gtid.source.includes
    displayName: Include GTID sources
    description: The source UUIDs used to include GTID ranges when determine the starting position in the MySQL server's binlog.
    type: LIST
-   name: gtid.source.excludes
    displayName: Exclude GTID sources
    description: The source UUIDs used to exclude GTID ranges when determine the starting position in the MySQL server's binlog.
    type: STRING
-   name: gtid.source.filter.dml.events
    displayName: Filter DML events
    description: If set to true, we will only produce DML events into Kafka for transactions that were written on mysql servers with UUIDs matching the
      filters defined by the gtid.source.includes or gtid.source.excludes configuration options, if they are specified.
    defaultValue: 'true'
    type: BOOLEAN
-   name: binlog.buffer.size
    displayName: Binlog reader buffer size
    description: The size of a look-ahead buffer used by the  binlog reader to decide whether the transaction in progress is going to be committed or rolled
      back. Use 0 to disable look-ahead buffering. Defaults to 0 (i.e. buffering is disabled).
    defaultValue: '0'
    type: INT
-   name: event.deserialization.failure.handling.mode
    displayName: Event deserialization failure handling
    description: "Specify how failures during deserialization of binlog events (i.e. when encountering a corrupted event) should be handled, including:
      'fail' (the default) an exception indicating the problematic event and its binlog position is raised, causing the connector to be stopped; 'warn'
      the problematic event and its binlog position will be logged and the event will be skipped; 'ignore' the problematic event will be skipped."
    defaultValue: fail
    type: STRING
-   name: inconsistent.schema.handling.mode
    displayName: Inconsistent schema failure handling
    description: "Specify how binlog events that belong to a table missing from internal schema representation (i.e. internal representation is not consistent
      with database) should be handled, including: 'fail' (the default) an exception indicating the problematic event and its binlog position is raised,
      causing the connector to be stopped; 'warn' the problematic event and its binlog position will be logged and the event will be skipped; 'skip' the
      problematic event will be skipped."
    defaultValue: fail
    type: STRING
