---
name       : Build & Test
on         :
  push:
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types:
    -   prereleased
    -   released

permissions:
  packages: write

jobs       :
  verify-files:
    runs-on: ubuntu-latest
    steps:
    -   uses: actions/checkout@v3
    -   name: Verify Dockerfiles
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile*
          recursive: true
          verbose: true
          failure-threshold: error
    -   name: Verify scripts
        run: bash .github/scripts/verify.sh

  build:
    needs: verify-files
    name: Build & analyze with Sonar
    runs-on: ubuntu-latest
    steps:
    -   uses: actions/checkout@v3
        with:
          fetch-depth: 0         # Shallow clones should be disabled for a better relevancy of analysis
    -   name: Set up JDK 17 and gradle cache
        uses: actions/setup-java@v3
        id: gradle-build
        with:
          java-version: '17'
          distribution: zulu
          cache: gradle
    -   run: ./gradlew :platform-api:build --no-daemon
    -   run: ./gradlew :pipeline:build --no-daemon
    -   name: Cache SonarCloud packages
        uses: actions/cache@v3
        id: setup-sonar-cache
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
    -   name: Build and analyze platform-api on Sonar
        id: sonar-check-platform-api
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew :platform-api:build sonarqube
    -   name: Build and analyze pipeline on Sonar
        id: sonar-check-pipeline
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew :pipeline:build sonarqube
    -   uses: actions/upload-artifact@v3
        with:
          name: platform-api
          path: platform-api/build/openapi
          retention-days: 14
    -   name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
    -   name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f python-runner/requirements.txt ]; then pip install -r python-runner/requirements.txt; fi
    -   name: Lint Python code with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    -   name: Copy filters and transforms
        run: |
          cp -r filters python-runner
          cp -r transforms python-runner
    -   name: Test python-runner with pytest
        run: |
          pytest python-runner
    -   name: Test pre-defined filters with pytest
        run: |
          pytest filters
    -   name: Test pre-defined transforms with pytest
        run: |
          pytest transforms
  push:
    if: github.ref_name == 'main' || github.ref_type == 'tag' || github.base_ref == 'main'
    name: Build and push datacater image
    needs: build
    runs-on: ubuntu-latest
    steps:
    -   uses: actions/checkout@v3
    -   name: Set RELEASE_VERSION
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    -   name: Set up JDK 17 and gradle cache
        uses: actions/setup-java@v3
        id: gradle-build
        with:
          java-version: '17'
          distribution: zulu
          cache: gradle
    -   run: |
          FILTERS_SRC="${GITHUB_WORKSPACE}/filters"
          TRANSFORM_SRC="${GITHUB_WORKSPACE}/transforms"
          DEST="${GITHUB_WORKSPACE}/platform-api/src/main/jib/datacater"
          mkdir -p $DEST
          rm -fr $DEST/*
          cp -R $FILTERS_SRC $DEST
          cp -R $TRANSFORM_SRC $DEST
    -   name: PR Push datacater image to ghcr.io
        if: github.base_ref == 'main'
        run: |
          ./gradlew :platform-api:build --no-daemon -x test \
                -Dquarkus.jib.platforms=linux/amd64,linux/arm64 \
                -Dquarkus.container-image.tag=${GITHUB_SHA} \
                -Dquarkus.container-image.additional-tags=${{ github.run_id }} \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                -Dquarkus.container-image.registry=ghcr.io \
                -Dquarkus.container-image.username=${{ github.actor }} \
                -Dquarkus.container-image.password=${{ secrets.GITHUB_TOKEN }}
    -   name: Push datacater/datacater:nightly to Docker Hub
        if: github.ref_name == 'main'
        run: |
          ./gradlew :platform-api:build --no-daemon -x test \
                -Dquarkus.jib.platforms=linux/amd64,linux/arm64 \
                -Dquarkus.container-image.tag=nightly \
                -Dquarkus.container-image.additional-tags=${GITHUB_SHA} \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                -Dquarkus.container-image.registry=docker.io \
                -Dquarkus.container-image.username=datacater \
                -Dquarkus.container-image.password=${{ secrets.DOCKERHUB_TOKEN }}
    -   name: Push datacater/datacater to Docker Hub
        if: github.event.action == 'released' || github.event.action == 'prereleased'
        run: |
          ./gradlew :platform-api:build --no-daemon -x test \
                -Dquarkus.jib.platforms=linux/amd64,linux/arm64 \
                -Dquarkus.container-image.tag=${RELEASE_VERSION} \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                -Dquarkus.container-image.registry=docker.io \
                -Dquarkus.container-image.username=datacater \
                -Dquarkus.container-image.password=${{ secrets.DOCKERHUB_TOKEN }}
  push_pipeline:
    if: github.ref_name == 'main' || github.ref_type == 'tag' || github.base_ref == 'main'
    name: Build and push pipeline image
    needs: build
    runs-on: ubuntu-latest
    steps:
    -   uses: actions/checkout@v3
    -   name: Set RELEASE_VERSION
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    -   name: Set up JDK 17 and gradle cache
        uses: actions/setup-java@v3
        id: gradle-build
        with:
          java-version: '17'
          distribution: zulu
          cache: gradle
    -   run: |
          FILTERS_SRC="${GITHUB_WORKSPACE}/filters"
          TRANSFORM_SRC="${GITHUB_WORKSPACE}/transforms"
          DEST="${GITHUB_WORKSPACE}/platform-api/src/main/jib/datacater"
          mkdir -p $DEST
          rm -fr $DEST/*
          cp -R $FILTERS_SRC $DEST
          cp -R $TRANSFORM_SRC $DEST
    -   name: '[PR] Push pipeline image to ghcr.io'
        if: github.base_ref == 'main'
        run: |
          ./gradlew :pipeline:build --no-daemon -x test \
                -Dquarkus.jib.platforms=linux/amd64,linux/arm64 \
                -Dquarkus.container-image.tag=${GITHUB_SHA} \
                -Dquarkus.container-image.additional-tags=${{ github.run_id }} \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                -Dquarkus.container-image.registry=ghcr.io \
                -Dquarkus.container-image.username=${{ github.actor }} \
                -Dquarkus.container-image.password=${{ secrets.GITHUB_TOKEN }}
    -   name: Push datacater/pipeline:nightly to Docker Hub
        if: github.ref_name == 'main'
        run: |
          ./gradlew :pipeline:build --no-daemon -x test \
                -Dquarkus.jib.platforms=linux/amd64,linux/arm64 \
                -Dquarkus.container-image.tag=nightly \
                -Dquarkus.container-image.additional-tags=${GITHUB_SHA} \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                -Dquarkus.container-image.registry=docker.io \
                -Dquarkus.container-image.username=datacater \
                -Dquarkus.container-image.password=${{ secrets.DOCKERHUB_TOKEN }}
    -   name: Push datacater/pipeline to Docker Hub
        if: github.event.action == 'released' || github.event.action == 'prereleased'
        run: |
          ./gradlew :pipeline:build --no-daemon -x test \
                -Dquarkus.jib.platforms=linux/amd64,linux/arm64 \
                -Dquarkus.container-image.tag=${RELEASE_VERSION} \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                -Dquarkus.container-image.registry=docker.io \
                -Dquarkus.container-image.username=datacater \
                -Dquarkus.container-image.password=${{ secrets.DOCKERHUB_TOKEN }}
  push_pipeline_native:
    if: github.ref_name == 'main' || github.ref_type == 'tag' || github.base_ref == 'main'
    name: Build and push native pipeline image
    needs: build
    runs-on: ubuntu-latest
    steps:
    -   uses: actions/checkout@v3
    -   name: Set RELEASE_VERSION
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    -   name: Set up JDK 17 and gradle cache
        uses: actions/setup-java@v3
        id: gradle-build
        with:
          java-version: '17'
          distribution: zulu
          cache: gradle
    -   run: |
          FILTERS_SRC="${GITHUB_WORKSPACE}/filters"
          TRANSFORM_SRC="${GITHUB_WORKSPACE}/transforms"
          DEST="${GITHUB_WORKSPACE}/platform-api/src/main/jib/datacater"
          mkdir -p $DEST
          rm -fr $DEST/*
          cp -R $FILTERS_SRC $DEST
          cp -R $TRANSFORM_SRC $DEST
    -   name: '[PR] Push pipeline-native image to ghcr.io'
        if: github.base_ref == 'main'
        run: |
          ./gradlew :pipeline:build --no-daemon -x test \
                -Dquarkus.jib.platforms=linux/amd64 \
                -Dquarkus.native.container-build=true \
                -Dquarkus.package.type=native \
                -Dquarkus.container-image.tag=native-${GITHUB_SHA} \
                -Dquarkus.container-image.additional-tags=native-${{ github.run_id }} \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                -Dquarkus.container-image.registry=ghcr.io \
                -Dquarkus.container-image.username=${{ github.actor }} \
                -Dquarkus.container-image.password=${{ secrets.GITHUB_TOKEN }}
    -   name: Push datacater/pipeline:native-nightly to Docker Hub
        if: github.ref_name == 'main'
        run: |
          ./gradlew :pipeline:build --no-daemon -x test \
                -Dquarkus.jib.platforms=linux/amd64 \
                -Dquarkus.native.container-build=true \
                -Dquarkus.package.type=native \
                -Dquarkus.container-image.tag=native-nightly \
                -Dquarkus.container-image.additional-tags=native-${GITHUB_SHA} \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                -Dquarkus.container-image.registry=docker.io \
                -Dquarkus.container-image.username=datacater \
                -Dquarkus.container-image.password=${{ secrets.DOCKERHUB_TOKEN }}
    -   name: Push datacater/pipeline to Docker Hub
        if: github.event.action == 'released' || github.event.action == 'prereleased'
        run: |
          ./gradlew :pipeline:build --no-daemon -x test \
                -Dquarkus.jib.platforms=linux/amd64,linux/arm64 \
                -Dquarkus.native.container-build=true \
                -Dquarkus.package.type=native \
                -Dquarkus.container-image.tag=native-${RELEASE_VERSION} \
                -Dquarkus.container-image.build=true \
                -Dquarkus.container-image.push=true \
                -Dquarkus.container-image.registry=docker.io \
                -Dquarkus.container-image.username=datacater \
                -Dquarkus.container-image.password=${{ secrets.DOCKERHUB_TOKEN }}
  push_python_runner:
    if: github.ref_name == 'main' || github.ref_type == 'tag' || github.base_ref == 'main'
    name: Build and push Python Runner image
    needs: build
    runs-on: ubuntu-latest
    steps:
    -   uses: actions/checkout@v3
    -   name: Set RELEASE_VERSION
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    -   name: Copy filters and transforms
        run: |
          rm -rf python-runner/filters
          cp -r filters python-runner
          rm -rf python-runner/transforms
          cp -r transforms python-runner
    -   name: Login to GHCR
        if: github.base_ref == 'main'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    -   name: '[PR] Push python-runner'
        working-directory: python-runner
        if: github.base_ref == 'main'
        run: |
          docker build -t ghcr.io/datacater/python-runner:${GITHUB_SHA} -t ghcr.io/datacater/python-runner:${{ github.run_id}} .
          docker push ghcr.io/datacater/python-runner:${GITHUB_SHA}
          docker push ghcr.io/datacater/python-runner:${{ github.run_id }}
    -   name: Login to Docker Hub
        if: github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          username: datacater
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    -   name: Build datacater/python-runner:nightly and push it to DockerHub
        working-directory: python-runner
        if: github.ref_name == 'main'
        run: |
          docker build -t datacater/python-runner:nightly -t datacater/python-runner:${GITHUB_SHA} .
          docker push datacater/python-runner:nightly
          docker push datacater/python-runner:${GITHUB_SHA}
    -   name: Build image and push it to DockerHub
        working-directory: python-runner
        if: github.event.action == 'released' || github.event.action == 'prereleased'
        run: |
          docker build -t datacater/python-runner:${RELEASE_VERSION} .
          docker push datacater/python-runner:${RELEASE_VERSION}
  build_and_push_ui:
    if: github.ref_name == 'main' || github.ref_type == 'tag' || github.base_ref == 'main'
    name: Build and push UI image
    needs: build
    runs-on: ubuntu-latest
    steps:
    -   uses: actions/checkout@v3
    -   name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
    -   name: Set RELEASE_VERSION
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    -   name: Use Node.js v18
        uses: actions/setup-node@v1
        with:
          node-version: 18.x
    -   name: Install UI Dependencies
        working-directory: ui
        run: npm ci
    -   name: Build the UI
        working-directory: ui
        run: npm run build --if-present
    -   name: '[PR] Login to GHCR'
        if: github.base_ref == 'main'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    -   name: '[PR] Push UI'
        working-directory: ui
        if: github.base_ref == 'main'
        run: |
          docker buildx build --platform=linux/amd64,linux/arm64 -t ghcr.io/datacater/ui:${GITHUB_SHA} -t ghcr.io/datacater/ui:${{ github.actor }} --push .
    -   name: Login to Docker Hub
        uses: docker/login-action@v2
        if: github.ref_name == 'main'
        with:
          username: datacater
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    -   name: Build datacater/ui:nightly and push it to DockerHub
        working-directory: ui
        if: github.ref_name == 'main'
        run: |
          docker buildx build --platform=linux/amd64,linux/arm64 -t datacater/ui:nightly -t datacater/ui:${GITHUB_SHA} --push .
    -   name: Build image and push it to DockerHub
        working-directory: ui
        if: github.event.action == 'released' || github.event.action == 'prereleased'
        run: |
          docker buildx build --platform=linux/amd64,linux/arm64 -t datacater/ui:${RELEASE_VERSION} --push .
